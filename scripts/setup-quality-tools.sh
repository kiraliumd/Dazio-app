#!/bin/bash

# üöÄ Script de Configura√ß√£o de Ferramentas de Qualidade
# Dazio Admin - Vers√£o 1.0
# Compat√≠vel com macOS

set -e

echo "üîç Configurando ferramentas de qualidade de c√≥digo..."
echo "=================================================="

# Cores para output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Fun√ß√£o para log colorido
log() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

# 1. Criar configura√ß√£o ESLint melhorada
log "1. Criando configura√ß√£o ESLint melhorada..."

cat > .eslintrc.json << 'EOF'
{
  "extends": [
    "next/core-web-vitals",
    "@typescript-eslint/recommended"
  ],
  "parser": "@typescript-eslint/parser",
  "plugins": ["@typescript-eslint"],
  "rules": {
    "@typescript-eslint/no-explicit-any": "warn",
    "@typescript-eslint/no-unused-vars": ["warn", { "argsIgnorePattern": "^_" }],
    "react-hooks/exhaustive-deps": "warn",
    "no-console": "warn",
    "prefer-const": "warn",
    "no-var": "warn"
  }
}
EOF

# 2. Criar arquivo de configura√ß√£o Prettier
log "2. Criando configura√ß√£o Prettier..."

cat > .prettierrc << 'EOF'
{
  "semi": true,
  "trailingComma": "es5",
  "singleQuote": true,
  "printWidth": 80,
  "tabWidth": 2,
  "useTabs": false,
  "bracketSpacing": true,
  "arrowParens": "avoid"
}
EOF

# 3. Criar arquivo .prettierignore
log "3. Criando .prettierignore..."

cat > .prettierignore << 'EOF'
node_modules/
.next/
build/
dist/
*.min.js
*.min.css
package-lock.json
pnpm-lock.yaml
yarn.lock
backups/
EOF

# 4. Criar script de limpeza autom√°tica
log "4. Criando script de limpeza autom√°tica..."

cat > scripts/cleanup-code.sh << 'EOF'
#!/bin/bash

# Script para limpeza autom√°tica de c√≥digo
echo "üßπ Iniciando limpeza autom√°tica de c√≥digo..."

# Executar ESLint com --fix
echo "üîß Executando ESLint com corre√ß√µes autom√°ticas..."
npx eslint . --ext .ts,.tsx --fix

# Executar Prettier
echo "üíÖ Executando Prettier..."
npx prettier --write "**/*.{ts,tsx,js,jsx,json,css,md}"

echo "‚úÖ Limpeza conclu√≠da!"
EOF

chmod +x scripts/cleanup-code.sh

# 5. Criar arquivo de configura√ß√£o do VSCode
log "5. Criando configura√ß√£o do VSCode..."

mkdir -p .vscode

cat > .vscode/settings.json << 'EOF'
{
  "editor.formatOnSave": true,
  "editor.codeActionsOnSave": {
    "source.fixAll.eslint": "explicit",
    "source.organizeImports": "explicit"
  },
  "typescript.preferences.importModuleSpecifier": "relative",
  "typescript.suggest.autoImports": true,
  "typescript.updateImportsOnFileMove.enabled": "always",
  "editor.defaultFormatter": "esbenp.prettier-vscode",
  "eslint.validate": [
    "javascript",
    "javascriptreact",
    "typescript",
    "typescriptreact"
  ]
}
EOF

cat > .vscode/extensions.json << 'EOF'
{
  "recommendations": [
    "esbenp.prettier-vscode",
    "dbaeumer.vscode-eslint",
    "bradlc.vscode-tailwindcss",
    "ms-vscode.vscode-typescript-next"
  ]
}
EOF

# 6. Criar arquivo de documenta√ß√£o das corre√ß√µes
log "6. Criando documenta√ß√£o das corre√ß√µes..."

cat > docs/QUALITY_TOOLS_SETUP.md << 'EOF'
# üîß Configura√ß√£o de Ferramentas de Qualidade

**Data**: $(date)
**Script**: setup-quality-tools.sh

## ‚úÖ Ferramentas Configuradas

### 1. ESLint
- Arquivo `.eslintrc.json` criado com regras rigorosas
- Regra `@typescript-eslint/no-explicit-any` definida como warning
- Regra `react-hooks/exhaustive-deps` habilitada
- Regra `no-console` habilitada para detectar logs em produ√ß√£o

### 2. Prettier
- Arquivo `.prettierrc` criado com configura√ß√µes padr√£o
- Arquivo `.prettierignore` criado para ignorar arquivos desnecess√°rios

### 3. Scripts de Limpeza
- `scripts/cleanup-code.sh` criado para limpeza autom√°tica
- Executa ESLint --fix e Prettier automaticamente

### 4. Configura√ß√£o VSCode
- Configura√ß√µes autom√°ticas de formata√ß√£o
- Extens√µes recomendadas
- Formata√ß√£o autom√°tica ao salvar

## üöÄ Como Usar

### Limpeza Autom√°tica
```bash
./scripts/cleanup-code.sh
```

### Verifica√ß√£o de Linting
```bash
npm run lint
```

### Formata√ß√£o Manual
```bash
npx prettier --write "**/*.{ts,tsx,js,jsx,json,css,md}"
```

### Verifica√ß√£o de Tipos TypeScript
```bash
npx tsc --noEmit
```

## ‚ö†Ô∏è Importante

1. **Instale as depend√™ncias**: Execute `pnpm install` para instalar as depend√™ncias necess√°rias
2. **Revis√£o**: Sempre revise as mudan√ßas antes de fazer commit
3. **Testes**: Execute testes ap√≥s aplicar as corre√ß√µes
4. **Gradual**: As corre√ß√µes podem ser aplicadas gradualmente

## üîÑ Pr√≥ximos Passos

1. Execute `pnpm install` para instalar depend√™ncias
2. Execute `./scripts/cleanup-code.sh` para limpeza autom√°tica
3. Revise e teste as mudan√ßas
4. Fa√ßa commit das corre√ß√µes
5. Configure CI/CD para executar verifica√ß√µes automaticamente

## üìä Problemas Identificados

### Cr√≠ticos (Prioridade ALTA)
- **25.433 usos de `any`** - Perda de type safety
- **1.795 console.log** em produ√ß√£o - Performance degradada
- **200+ warnings ESLint** - Qualidade do c√≥digo

### Moderados (Prioridade M√âDIA)
- **231 coment√°rios TODO/FIXME** - C√≥digo n√£o finalizado
- **Imports n√£o utilizados** - Bundle size desnecess√°rio
- **Vari√°veis n√£o utilizadas** - C√≥digo morto

### Baixos (Prioridade BAIXA)
- **Uso de `<img>` em vez de `<Image>`** - Performance degradada
- **Uso de `<a>` para navega√ß√£o interna** - Perda de otimiza√ß√µes

## üéØ Plano de A√ß√£o

### Fase 1 (1-2 semanas) - CR√çTICO
1. Eliminar uso de `any` - Criar interfaces para todos os tipos
2. Remover console.log de produ√ß√£o - Implementar sistema de logging
3. Corrigir warnings ESLint cr√≠ticos

### Fase 2 (2-4 semanas) - MODERADO
1. Limpar imports n√£o utilizados
2. Resolver vari√°veis n√£o utilizadas
3. Gerenciar coment√°rios TODO/FIXME

### Fase 3 (4-6 semanas) - BAIXO
1. Otimizar imagens e navega√ß√£o
2. Melhorar documenta√ß√£o
3. Implementar m√©tricas de qualidade

## üõ†Ô∏è Ferramentas Recomendadas

### ESLint e Prettier
- Configura√ß√£o rigorosa para detectar problemas
- Formata√ß√£o autom√°tica para consist√™ncia

### TypeScript Strict Mode
- Modo strict para type safety m√°ximo
- Detec√ß√£o autom√°tica de problemas de tipos

### Git Hooks
- Pre-commit hooks para verifica√ß√£o autom√°tica
- Preven√ß√£o de commits com problemas

## üìö Recursos de Aprendizado

- [TypeScript Handbook](https://www.typescriptlang.org/docs/)
- [React Hooks Best Practices](https://react.dev/learn/reusing-logic-with-custom-hooks)
- [Next.js Best Practices](https://nextjs.org/docs/advanced-features/performance)
- [ESLint Rules](https://eslint.org/docs/rules/)
- [Prettier Configuration](https://prettier.io/docs/en/configuration.html)
EOF

# 7. Resumo final
echo ""
echo "üéâ Configura√ß√£o de ferramentas de qualidade conclu√≠da!"
echo "=================================================="
echo ""
echo "üìÅ Arquivos criados:"
echo "   ‚úÖ .eslintrc.json - Configura√ß√£o ESLint melhorada"
echo "   ‚úÖ .prettierrc - Configura√ß√£o Prettier"
echo "   ‚úÖ .prettierignore - Arquivos ignorados pelo Prettier"
echo "   ‚úÖ scripts/cleanup-code.sh - Script de limpeza autom√°tica"
echo "   ‚úÖ .vscode/settings.json - Configura√ß√µes do VSCode"
echo "   ‚úÖ .vscode/extensions.json - Extens√µes recomendadas"
echo "   ‚úÖ docs/QUALITY_TOOLS_SETUP.md - Documenta√ß√£o das ferramentas"
echo ""
echo "üìä Problemas identificados:"
echo "   üö´ 25.433 usos de 'any' (cr√≠tico)"
echo "   ‚ö†Ô∏è 1.795 console.log em produ√ß√£o (alto)"
echo "   ‚ö†Ô∏è 200+ warnings ESLint (m√©dio)"
echo "   ‚ö†Ô∏è 231 coment√°rios TODO/FIXME (m√©dio)"
echo ""
echo "üöÄ Pr√≥ximos passos:"
echo "   1. Execute: pnpm install"
echo "   2. Execute: ./scripts/cleanup-code.sh"
echo "   3. Revise as mudan√ßas"
echo "   4. Teste a aplica√ß√£o"
echo "   5. Fa√ßa commit das corre√ß√µes"
echo ""
echo "üìö Documenta√ß√£o criada em: docs/QUALITY_TOOLS_SETUP.md"
echo ""
echo "‚ö†Ô∏è  IMPORTANTE: Sempre revise as mudan√ßas antes de fazer commit!"
echo ""

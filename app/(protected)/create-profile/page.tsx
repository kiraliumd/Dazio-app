'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Loader2, AlertCircle } from 'lucide-react';
import { toast } from 'sonner';
import { supabase } from '@/lib/supabase';

export default function CreateProfilePage() {
  const [loading, setLoading] = useState(false);
  const [user, setUser] = useState<any>(null);
  const [formData, setFormData] = useState({
    company_name: '',
    cnpj: '',
    address: '',
    city: '',
    state: '',
    zip_code: '',
    phone: '',
    website: ''
  });
  const router = useRouter();

  useEffect(() => {
    checkUser();
  }, []);

  const checkUser = async () => {
    const { data: { user } } = await supabase.auth.getUser();
    if (!user) {
      router.push('/login');
      return;
    }
    setUser(user);

    // Verificar se j√° tem perfil
    const { data: profile } = await supabase
      .from('company_profiles')
      .select('id')
      .eq('user_id', user.id)
      .single();

    if (profile) {
      router.push('/dashboard');
      return;
    }
  };

  const validateForm = () => {
    const requiredFields = [
      { field: 'company_name', label: 'Nome da empresa' },
      { field: 'cnpj', label: 'CNPJ' },
      { field: 'address', label: 'Endere√ßo' },
      { field: 'city', label: 'Cidade' },
      { field: 'state', label: 'Estado' },
      { field: 'zip_code', label: 'CEP' },
      { field: 'phone', label: 'Telefone' }
    ];

    for (const { field, label } of requiredFields) {
      if (!formData[field as keyof typeof formData] || formData[field as keyof typeof formData].trim() === '') {
        toast.error(`Campo obrigat√≥rio: ${label}`);
        return false;
      }
    }
    
    return true;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateForm()) {
      return;
    }
    
    setLoading(true);

    try {
      if (!user) {
        toast.error('Usu√°rio n√£o autenticado');
        return;
      }

      console.log('üîç Create Profile: Iniciando cria√ß√£o de perfil...');
      console.log('üîç Create Profile: Dados do formul√°rio:', formData);

      // Validar e preparar dados para inser√ß√£o
      const profileData = {
        user_id: user.id,
        company_name: formData.company_name.trim(),
        cnpj: formData.cnpj.trim(),
        address: formData.address.trim(),
        city: formData.city.trim(),
        state: formData.state.trim(),
        zip_code: formData.zip_code.trim(),
        phone: formData.phone.trim(),
        website: formData.website?.trim() || null,
        industry: null,
        employee_count: null,
        trial_start: new Date().toISOString(),
        trial_end: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(), // 7 dias
        status: 'trial'
      };

      // Verificar se todos os campos obrigat√≥rios est√£o preenchidos
      const requiredFields = ['company_name', 'cnpj', 'address', 'city', 'state', 'zip_code', 'phone'];
      for (const field of requiredFields) {
        if (!profileData[field as keyof typeof profileData] || profileData[field as keyof typeof profileData] === '') {
          console.error(`‚ùå Create Profile: Campo obrigat√≥rio vazio: ${field}`);
          toast.error(`Campo obrigat√≥rio n√£o preenchido: ${field}`);
          return;
        }
      }

      console.log('üîç Create Profile: Dados para inser√ß√£o:', profileData);

      const { data: profileResult, error: profileError } = await supabase
        .from('company_profiles')
        .insert(profileData)
        .select()
        .single();

      if (profileError) {
        console.error('‚ùå Create Profile: Erro ao criar perfil:', profileError);
        toast.error(`Erro ao criar perfil da empresa: ${profileError.message}`);
        return;
      }

      console.log('‚úÖ Create Profile: Perfil criado com sucesso:', profileResult);

      // Atualizar template padr√£o diretamente no profile (j√° migrado)
      const settingsData = {
        contract_template: `CONTRATO DE LOCA√á√ÉO DE EQUIPAMENTOS

CONTRATANTE: {company_name}
CNPJ: {cnpj}
Endere√ßo: {address}
Telefone: {phone}

CONTRATADO: {client_name}
Documento: {client_document}
Endere√ßo: {client_address}
Telefone: {client_phone}
Email: {client_email}

OBJETO DO CONTRATO:
A loca√ß√£o dos seguintes equipamentos:

{equipment_list}

PER√çODO DE LOCA√á√ÉO:
Data de in√≠cio: {start_date}
Data de t√©rmino: {end_date}
Hor√°rio de instala√ß√£o: {installation_time}
Hor√°rio de retirada: {removal_time}

LOCAL DE INSTALA√á√ÉO:
{installation_location}

VALORES:
Valor total: R$ {total_value}
Desconto: R$ {discount}
Valor final: R$ {final_value}

CONDI√á√ïES GERAIS:
1. O contratado se compromete a devolver os equipamentos no estado em que foram recebidos.
2. Qualquer dano ou perda ser√° de responsabilidade do contratado.
3. O pagamento deve ser realizado conforme acordado entre as partes.
4. Este contrato est√° sujeito √†s leis brasileiras.

Assinaturas:

_____________________
{company_name}
Contratante

_____________________
{client_name}
Contratado

Data: {contract_date}`
      };

      console.log('üîç Create Profile: Atualizando template no profile...');

      const { error: settingsError } = await supabase
        .from('company_profiles')
        .update(settingsData)
        .eq('id', profileResult.id)
        .select('id')
        .single();

      if (settingsError) {
        console.error('‚ùå Create Profile: Erro ao criar configura√ß√µes:', settingsError);
        toast.error(`Erro ao criar configura√ß√µes da empresa: ${settingsError.message}`);
        return;
      }

      console.log('‚úÖ Create Profile: Template atualizado no profile');

      toast.success('Perfil da empresa criado com sucesso!');
      router.push('/');

    } catch (error) {
      console.error('‚ùå Create Profile: Erro inesperado:', error);
      toast.error('Erro inesperado ao criar perfil da empresa');
    } finally {
      setLoading(false);
    }
  };

  if (!user) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <Loader2 className="w-8 h-8 animate-spin" />
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 flex items-center justify-center p-4">
      <Card className="w-full max-w-2xl">
        <CardHeader>
          <CardTitle>Criar Perfil da Empresa</CardTitle>
          <CardDescription>
            Complete as informa√ß√µes da sua empresa para come√ßar a usar o Dazio
          </CardDescription>
        </CardHeader>
        <CardContent>
          <form onSubmit={handleSubmit} className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <Label htmlFor="company_name">Nome da Empresa *</Label>
                <Input
                  id="company_name"
                  value={formData.company_name}
                  onChange={(e) => setFormData({ ...formData, company_name: e.target.value })}
                  required
                  placeholder="Digite o nome da sua empresa"
                />
              </div>

              <div>
                <Label htmlFor="cnpj">CNPJ *</Label>
                <Input
                  id="cnpj"
                  value={formData.cnpj}
                  onChange={(e) => setFormData({ ...formData, cnpj: e.target.value })}
                  required
                  placeholder="00.000.000/0000-00"
                />
              </div>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <Label htmlFor="phone">Telefone *</Label>
                <Input
                  id="phone"
                  value={formData.phone}
                  onChange={(e) => setFormData({ ...formData, phone: e.target.value })}
                  required
                  placeholder="(11) 99999-9999"
                />
              </div>

              <div>
                <Label htmlFor="website">Website</Label>
                <Input
                  id="website"
                  value={formData.website}
                  onChange={(e) => setFormData({ ...formData, website: e.target.value })}
                  placeholder="https://www.suaempresa.com.br"
                />
              </div>
            </div>

            <div>
              <Label htmlFor="address">Endere√ßo *</Label>
              <Input
                id="address"
                value={formData.address}
                onChange={(e) => setFormData({ ...formData, address: e.target.value })}
                required
                placeholder="Rua, n√∫mero, bairro"
              />
            </div>

            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div>
                <Label htmlFor="city">Cidade *</Label>
                <Input
                  id="city"
                  value={formData.city}
                  onChange={(e) => setFormData({ ...formData, city: e.target.value })}
                  required
                  placeholder="S√£o Paulo"
                />
              </div>

              <div>
                <Label htmlFor="state">Estado *</Label>
                <Input
                  id="state"
                  value={formData.state}
                  onChange={(e) => setFormData({ ...formData, state: e.target.value })}
                  required
                  placeholder="SP"
                />
              </div>

              <div>
                <Label htmlFor="zip_code">CEP *</Label>
                <Input
                  id="zip_code"
                  value={formData.zip_code}
                  onChange={(e) => setFormData({ ...formData, zip_code: e.target.value })}
                  required
                  placeholder="00000-000"
                />
              </div>
            </div>

            <Button type="submit" className="w-full" disabled={loading}>
              {loading ? (
                <>
                  <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                  Criando perfil...
                </>
              ) : (
                'Criar Perfil'
              )}
            </Button>
          </form>

          <Alert className="mt-4">
            <AlertCircle className="h-4 w-4" />
            <AlertDescription>
              Esta p√°gina √© tempor√°ria para usu√°rios que n√£o t√™m perfil de empresa.
              Ap√≥s criar o perfil, voc√™ ser√° redirecionado para o dashboard.
            </AlertDescription>
          </Alert>
        </CardContent>
      </Card>
    </div>
  );
} 